// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dda.proto

package dda

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Allocations struct {
	Allocation           []*Allocation `protobuf:"bytes,1,rep,name=Allocation,proto3" json:"Allocation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Allocations) Reset()         { *m = Allocations{} }
func (m *Allocations) String() string { return proto.CompactTextString(m) }
func (*Allocations) ProtoMessage()    {}
func (*Allocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff5948abea4984a, []int{0}
}

func (m *Allocations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Allocations.Unmarshal(m, b)
}
func (m *Allocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Allocations.Marshal(b, m, deterministic)
}
func (m *Allocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocations.Merge(m, src)
}
func (m *Allocations) XXX_Size() int {
	return xxx_messageInfo_Allocations.Size(m)
}
func (m *Allocations) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocations.DiscardUnknown(m)
}

var xxx_messageInfo_Allocations proto.InternalMessageInfo

func (m *Allocations) GetAllocation() []*Allocation {
	if m != nil {
		return m.Allocation
	}
	return nil
}

type Allocation struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Allocation) Reset()         { *m = Allocation{} }
func (m *Allocation) String() string { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()    {}
func (*Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff5948abea4984a, []int{1}
}

func (m *Allocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Allocation.Unmarshal(m, b)
}
func (m *Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Allocation.Marshal(b, m, deterministic)
}
func (m *Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocation.Merge(m, src)
}
func (m *Allocation) XXX_Size() int {
	return xxx_messageInfo_Allocation.Size(m)
}
func (m *Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_Allocation proto.InternalMessageInfo

func (m *Allocation) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Games struct {
	Game                 []*Game  `protobuf:"bytes,1,rep,name=Game,proto3" json:"Game,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Games) Reset()         { *m = Games{} }
func (m *Games) String() string { return proto.CompactTextString(m) }
func (*Games) ProtoMessage()    {}
func (*Games) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff5948abea4984a, []int{2}
}

func (m *Games) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Games.Unmarshal(m, b)
}
func (m *Games) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Games.Marshal(b, m, deterministic)
}
func (m *Games) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Games.Merge(m, src)
}
func (m *Games) XXX_Size() int {
	return xxx_messageInfo_Games.Size(m)
}
func (m *Games) XXX_DiscardUnknown() {
	xxx_messageInfo_Games.DiscardUnknown(m)
}

var xxx_messageInfo_Games proto.InternalMessageInfo

func (m *Games) GetGame() []*Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type Game struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Song                 string   `protobuf:"bytes,2,opt,name=Song,proto3" json:"Song,omitempty"`
	HomeID               string   `protobuf:"bytes,3,opt,name=HomeID,proto3" json:"HomeID,omitempty"`
	HomeScore            int32    `protobuf:"varint,4,opt,name=HomeScore,proto3" json:"HomeScore,omitempty"`
	HomeReady            bool     `protobuf:"varint,5,opt,name=HomeReady,proto3" json:"HomeReady,omitempty"`
	AwayID               string   `protobuf:"bytes,6,opt,name=AwayID,proto3" json:"AwayID,omitempty"`
	AwayScore            int32    `protobuf:"varint,7,opt,name=AwayScore,proto3" json:"AwayScore,omitempty"`
	AwayReady            bool     `protobuf:"varint,8,opt,name=AwayReady,proto3" json:"AwayReady,omitempty"`
	Started              int64    `protobuf:"varint,9,opt,name=Started,proto3" json:"Started,omitempty"`
	Finished             int64    `protobuf:"varint,10,opt,name=Finished,proto3" json:"Finished,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff5948abea4984a, []int{3}
}

func (m *Game) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Game.Unmarshal(m, b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Game.Marshal(b, m, deterministic)
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return xxx_messageInfo_Game.Size(m)
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Game) GetSong() string {
	if m != nil {
		return m.Song
	}
	return ""
}

func (m *Game) GetHomeID() string {
	if m != nil {
		return m.HomeID
	}
	return ""
}

func (m *Game) GetHomeScore() int32 {
	if m != nil {
		return m.HomeScore
	}
	return 0
}

func (m *Game) GetHomeReady() bool {
	if m != nil {
		return m.HomeReady
	}
	return false
}

func (m *Game) GetAwayID() string {
	if m != nil {
		return m.AwayID
	}
	return ""
}

func (m *Game) GetAwayScore() int32 {
	if m != nil {
		return m.AwayScore
	}
	return 0
}

func (m *Game) GetAwayReady() bool {
	if m != nil {
		return m.AwayReady
	}
	return false
}

func (m *Game) GetStarted() int64 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Game) GetFinished() int64 {
	if m != nil {
		return m.Finished
	}
	return 0
}

type Event struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_fff5948abea4984a, []int{4}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Allocations)(nil), "dda.Allocations")
	proto.RegisterType((*Allocation)(nil), "dda.Allocation")
	proto.RegisterType((*Games)(nil), "dda.Games")
	proto.RegisterType((*Game)(nil), "dda.Game")
	proto.RegisterType((*Event)(nil), "dda.Event")
}

func init() { proto.RegisterFile("dda.proto", fileDescriptor_fff5948abea4984a) }

var fileDescriptor_fff5948abea4984a = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x3b, 0xe9, 0xbf, 0xe4, 0x54, 0xaa, 0x9c, 0x8b, 0x65, 0x88, 0x2b, 0xc4, 0x11, 0x25,
	0x17, 0x92, 0x2e, 0xab, 0x97, 0x22, 0x14, 0xb3, 0xd6, 0x7a, 0x25, 0xc9, 0x13, 0xcc, 0x36, 0xc7,
	0x1a, 0x48, 0x33, 0x25, 0x1d, 0x57, 0xfa, 0x06, 0xbe, 0xaf, 0x2f, 0x20, 0x33, 0xd3, 0x36, 0x21,
	0xb0, 0x7b, 0x77, 0xce, 0x77, 0xbe, 0xf3, 0x83, 0x39, 0xf3, 0x41, 0x50, 0x14, 0x32, 0xd9, 0x37,
	0x4a, 0x2b, 0x1c, 0x16, 0x85, 0x0c, 0x5f, 0x6e, 0x95, 0xda, 0x56, 0xb4, 0xb0, 0xd2, 0xfd, 0xef,
	0x9f, 0x0b, 0xda, 0xed, 0xf5, 0xd1, 0x39, 0xc4, 0x67, 0x98, 0x2d, 0xab, 0x4a, 0x6d, 0xa4, 0x2e,
	0x55, 0x7d, 0xc0, 0x05, 0x40, 0xdb, 0x72, 0x16, 0x0d, 0xe3, 0xd9, 0xed, 0xf3, 0xc4, 0x00, 0x5b,
	0x39, 0xeb, 0x58, 0xc4, 0x75, 0x77, 0x01, 0xe7, 0xe0, 0xad, 0x53, 0xce, 0x22, 0x16, 0x07, 0x99,
	0xb7, 0x4e, 0xc5, 0x3b, 0x18, 0xaf, 0xe4, 0x8e, 0x0e, 0xf8, 0x0a, 0x46, 0xa6, 0x38, 0x11, 0x03,
	0x4b, 0x34, 0x42, 0x66, 0x65, 0xf1, 0xd7, 0x73, 0xf3, 0x3e, 0x00, 0x11, 0x46, 0xb9, 0xaa, 0xb7,
	0xdc, 0xb3, 0x8a, 0xad, 0xf1, 0x0a, 0x26, 0xdf, 0xd4, 0x8e, 0xd6, 0x29, 0x1f, 0x5a, 0xf5, 0xd4,
	0xe1, 0x35, 0x04, 0xa6, 0xca, 0x37, 0xaa, 0x21, 0x3e, 0x8a, 0x58, 0x3c, 0xce, 0x5a, 0xe1, 0x3c,
	0xcd, 0x48, 0x16, 0x47, 0x3e, 0x8e, 0x58, 0xec, 0x67, 0xad, 0x60, 0x98, 0xcb, 0x3f, 0xf2, 0xb8,
	0x4e, 0xf9, 0xc4, 0x31, 0x5d, 0x67, 0xb6, 0x4c, 0xe5, 0x98, 0x53, 0xc7, 0xbc, 0x08, 0xe7, 0xa9,
	0x63, 0xfa, 0x8e, 0x79, 0x11, 0x90, 0xc3, 0x34, 0xd7, 0xb2, 0xd1, 0x54, 0xf0, 0x20, 0x62, 0xf1,
	0x30, 0x3b, 0xb7, 0x18, 0x82, 0xff, 0xb5, 0xac, 0xcb, 0xc3, 0x2f, 0x2a, 0x38, 0xd8, 0xd1, 0xa5,
	0x17, 0x53, 0x18, 0xdf, 0x3d, 0x50, 0xad, 0x6f, 0xff, 0x79, 0x00, 0x69, 0xba, 0xcc, 0xa9, 0x79,
	0x28, 0x37, 0x84, 0xef, 0xe1, 0xd9, 0x97, 0xaa, 0xa4, 0x5a, 0xe7, 0xba, 0x21, 0xb9, 0x43, 0xb0,
	0x37, 0xb4, 0xd6, 0xb0, 0x53, 0x8b, 0x41, 0xcc, 0x6e, 0x18, 0xde, 0x80, 0xbf, 0x22, 0xed, 0x6e,
	0x7f, 0x95, 0xb8, 0x00, 0x24, 0xe7, 0x00, 0x24, 0x77, 0x26, 0x00, 0xa7, 0x2d, 0xeb, 0x11, 0x03,
	0x7c, 0x0d, 0xd3, 0xd3, 0x06, 0xb6, 0xdf, 0x13, 0xb6, 0xa5, 0x18, 0xa0, 0x00, 0xff, 0xbb, 0x2a,
	0xeb, 0x27, 0x3d, 0x6f, 0x61, 0x66, 0x5f, 0xff, 0xa3, 0x92, 0x47, 0x6a, 0x1e, 0xb5, 0xbd, 0x81,
	0xc0, 0x1e, 0xe3, 0x49, 0xd6, 0x27, 0x98, 0xaf, 0x48, 0x77, 0xe3, 0xf9, 0xd8, 0x53, 0x5e, 0xf4,
	0x22, 0x6a, 0x1e, 0xf4, 0x11, 0xe6, 0xb9, 0x56, 0xfb, 0x4e, 0x3a, 0xfb, 0x41, 0x0e, 0xfb, 0x82,
	0x18, 0xdc, 0x4f, 0x2c, 0xf9, 0xc3, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x80, 0xb8, 0xb5,
	0x45, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DDAServiceClient is the client API for DDAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DDAServiceClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (DDAService_ClientStreamClient, error)
	GetGames(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Games, error)
	GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	JoinGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	ReadyPlayer(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	StartGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error)
	GetAllocations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Allocations, error)
	StopAllocation(ctx context.Context, in *Allocation, opts ...grpc.CallOption) (*Allocation, error)
}

type dDAServiceClient struct {
	cc *grpc.ClientConn
}

func NewDDAServiceClient(cc *grpc.ClientConn) DDAServiceClient {
	return &dDAServiceClient{cc}
}

func (c *dDAServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (DDAService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DDAService_serviceDesc.Streams[0], "/dda.DDAService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dDAServiceClientStreamClient{stream}
	return x, nil
}

type DDAService_ClientStreamClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type dDAServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *dDAServiceClientStreamClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dDAServiceClientStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dDAServiceClient) GetGames(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Games, error) {
	out := new(Games)
	err := c.cc.Invoke(ctx, "/dda.DDAService/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDAServiceClient) GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/dda.DDAService/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDAServiceClient) JoinGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/dda.DDAService/JoinGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDAServiceClient) ReadyPlayer(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/dda.DDAService/ReadyPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDAServiceClient) StartGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/dda.DDAService/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDAServiceClient) GetAllocations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Allocations, error) {
	out := new(Allocations)
	err := c.cc.Invoke(ctx, "/dda.DDAService/GetAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDAServiceClient) StopAllocation(ctx context.Context, in *Allocation, opts ...grpc.CallOption) (*Allocation, error) {
	out := new(Allocation)
	err := c.cc.Invoke(ctx, "/dda.DDAService/StopAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDAServiceServer is the server API for DDAService service.
type DDAServiceServer interface {
	ClientStream(DDAService_ClientStreamServer) error
	GetGames(context.Context, *empty.Empty) (*Games, error)
	GetGame(context.Context, *Game) (*Game, error)
	JoinGame(context.Context, *Game) (*Game, error)
	ReadyPlayer(context.Context, *Game) (*Game, error)
	StartGame(context.Context, *Game) (*Game, error)
	GetAllocations(context.Context, *empty.Empty) (*Allocations, error)
	StopAllocation(context.Context, *Allocation) (*Allocation, error)
}

// UnimplementedDDAServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDDAServiceServer struct {
}

func (*UnimplementedDDAServiceServer) ClientStream(srv DDAService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedDDAServiceServer) GetGames(ctx context.Context, req *empty.Empty) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (*UnimplementedDDAServiceServer) GetGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (*UnimplementedDDAServiceServer) JoinGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (*UnimplementedDDAServiceServer) ReadyPlayer(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyPlayer not implemented")
}
func (*UnimplementedDDAServiceServer) StartGame(ctx context.Context, req *Game) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (*UnimplementedDDAServiceServer) GetAllocations(ctx context.Context, req *empty.Empty) (*Allocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocations not implemented")
}
func (*UnimplementedDDAServiceServer) StopAllocation(ctx context.Context, req *Allocation) (*Allocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllocation not implemented")
}

func RegisterDDAServiceServer(s *grpc.Server, srv DDAServiceServer) {
	s.RegisterService(&_DDAService_serviceDesc, srv)
}

func _DDAService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DDAServiceServer).ClientStream(&dDAServiceClientStreamServer{stream})
}

type DDAService_ClientStreamServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type dDAServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *dDAServiceClientStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dDAServiceClientStreamServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DDAService_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDAServiceServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dda.DDAService/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDAServiceServer).GetGames(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDAService_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDAServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dda.DDAService/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDAServiceServer).GetGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDAService_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDAServiceServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dda.DDAService/JoinGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDAServiceServer).JoinGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDAService_ReadyPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDAServiceServer).ReadyPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dda.DDAService/ReadyPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDAServiceServer).ReadyPlayer(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDAService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDAServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dda.DDAService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDAServiceServer).StartGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDAService_GetAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDAServiceServer).GetAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dda.DDAService/GetAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDAServiceServer).GetAllocations(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDAService_StopAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Allocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDAServiceServer).StopAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dda.DDAService/StopAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDAServiceServer).StopAllocation(ctx, req.(*Allocation))
	}
	return interceptor(ctx, in, info, handler)
}

var _DDAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dda.DDAService",
	HandlerType: (*DDAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGames",
			Handler:    _DDAService_GetGames_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _DDAService_GetGame_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _DDAService_JoinGame_Handler,
		},
		{
			MethodName: "ReadyPlayer",
			Handler:    _DDAService_ReadyPlayer_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _DDAService_StartGame_Handler,
		},
		{
			MethodName: "GetAllocations",
			Handler:    _DDAService_GetAllocations_Handler,
		},
		{
			MethodName: "StopAllocation",
			Handler:    _DDAService_StopAllocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _DDAService_ClientStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dda.proto",
}
